{"data":{"site":{"siteMetadata":{"title":"RayLog","siteUrl":"https://rayleighko.github.io"}},"markdownRemark":{"html":"<h1>대댓글 만들기</h1>\n<p>이번에는 NextJS를 활용한 프로젝트에서 대댓글 만들기를 진행했다. 대댓글이라 하면 해당 게시글의 댓글에 달리는 답글을 말한다. 이런 대댓글을 만들기 전에는 NextJS 프로젝트가 생소할 뿐더러 Form을 Redux-Form을 이용하고 있기 때문에, 써본 적도 없는 Redux-Form을 이용한 데이터 관리를 잘 해낼 수 있을지 의문이었다.</p>\n<p>그래서인지 처음에는 구현 방향을 잃고 어떻게 하면 좋을지를 계속 고민했다. 하물며 이런 고민은 이번만이 아닐 것 같아 이렇게 글을 통해 공유하고자 한다.</p>\n<p>우선 나에게 주어진 상황은 다음과 같았다.</p>\n<ol>\n<li>NextJS 기반 프로젝트</li>\n<li>Redux-Form을 활용한 Form처리</li>\n<li>Redux-Form의 Field를 이용한 컴포넌트 단위 이벤트 처리(?)</li>\n<li>이미 구현되어 있는 댓글 기능</li>\n<li>퍼블리셔가 구현해놓은 정적 웹사이트</li>\n</ol>\n<p>사실 준비물은 모두 갖춰진 상황이었다. 더불어 끝나고 보니 이미 설계가 되어있었기 때문에 나는 그 속에서 기능만 구현하면 되는 상황이었다. 하지만 처음 프로젝트를 받았을 당시에는 이런 상황에 대한 이해도 없었기 때문에 어떻게 구현해야 할까 고민이었다. 그래서 이러한 고민을 순서대로 이 문서에 공유해보도록 하겠다.</p>\n<h2>자, 이제 시작이야 뭐부터 하지?</h2>\n<p>단순히 \"대댓글을 만들어라!\"라는 요구사항만 나에게 주어졌기 때문에 이걸 어떻게 구현할지는 내 주관에 따라 진행할 수 있었다. 우선적으로 Redux의 action을 이용해 API 서버에 request를 보내고, 그 결과로 response를 받는다. 그렇기 때문에  action 함수를 import해서 비동기적으로 사용해야 할 것이다.</p>\n<blockquote>\n<p>만약 비동기가 아닌 동기로 request를 보내거나 respense를 받는다면, 반환 시점을 명확하게 알 수 없어 데이터에 대한 신뢰도가 떨어진다. 아니, 떨어지는 수준이 아니라 신뢰할 수 없다고 할 수 있다.</p>\n</blockquote>\n<p>또한, 대댓글의 state는 해당 페이지에서만 가지고 있어도 된다. 따라서 redux를 통해 global하게 관리하지 않아도 될 것이다. 더불어 퍼블리셔가 있기 때문에 HTML과 CSS에 대한 고민은 하지 않아도 되는 상황이고, 이미 구현되어 있는 댓글과 다른 페이지들을 참고할 수 있었기 때문에 상대적으로 상황이 좋다고 판단했다.</p>\n<p>다음과 같은 진행 상황을 통해 문제를 해결했다.</p>\n<ol>\n<li>Swagger UI를 통해 API 서버에서 넘어오는 값 확인</li>\n<li>넘겨받은 값을 활용해 브라우저의 View를 구현하기로 결심</li>\n<li>댓글이 어떤 형태로 View에 뿌려지는 지를 보고 어떻게 추가할지 결정(댓글은 props의 map으로 뿌려주고 있었음)</li>\n</ol>\n<p>머리 속으로 어느정도 윤곽이 잡히자 천천히 문제를 해결해 나갔다. 하지만, 예상했던 것과 달리 원하는 결과를 출력할 수 없었는데, 그 이유는 Redux-Form을 이용해 액션 함수로 Request를 전달해야 하는데 그 과정이 익숙하지 않았기 때문이었다. 물론 이 문제말고도 팀 내에서도 결정되지 않은 댓글과 답글의 순서 및 형태(스타일 코드는 있었지만, 그걸 사용해 어떻게 뿌려줄지에 대한 의논이 필요했음), API 서버로 전달할 Request의 형식(어떻게 뿌려줄지를 결정하고, 이것을 효율적으로 구현하기 위해(브라우저에서는 연산을 최소한으로) Request와 Response의 형태를 결정해야 했음) 등이 구현에 문제가 되었지만 결론적으로 단시간의 토론을 통해 해결할 수 있었음.</p>\n<p>마찬가지로 다음과 같은 어려움을 겪기도 했다.</p>\n<ol>\n<li>props를 통해 response를 받아오는 상황에서 props를 state에 넣어 state를 변경해가며 브라우저의 View를 계속적으로 렌더링해야 했음.</li>\n<li>더불어 Props를 이용하지 않고, 대입된 state를 활용하고 이를 setState를 활용해 브라우저의 View를 렌더링해줘야 했음(직접 props를 변경할 수 없기 때문)</li>\n<li>Redux-Form의 textarea의 input 값과 이를 전달하기 위해 props로 제공하는 onSubmit 인터페이스에 대한 스터디가 필요했음</li>\n<li>'더보기' 기능이 필요한데, 이 더보기는 API 서버에서 전달받은 limit만큼 댓글과 답글을 기존의 댓글과 답글 배열에 붙여주는 작업이 필요했음</li>\n<li>또한, state를 limit만큼 mapping하기 때문에 답글을 추가할 때 리스트의 처음(더보기 바로 위에 있는 댓글 혹은 답글) 값이 댓글일 경우 그 댓글의 답글을 입력해 등록하면 짤리는 현상이 있었음. 예를 들어 현재는 80개의 댓글과 답글을 보여주는데, 마지막 댓글에 답글을 달면 81개의 댓글과 답글이 존재하지만, 여전히 80개의 정보를 보여주고 있기 때문에 이를 해결해야 했음. -> 리스트의 처음이 댓글이고, 이 댓글의 답글을 작성할 경우 더보기 기능을 실행(80개씩 보여주다가 81개째가 되면 100개를 보여줌, 물론 100개를 보여준다고 했지만, 100개는 최댓값이고 그냥 81개가 보여짐)</li>\n</ol>","frontmatter":{"date":"March 08, 2019","path":"/blog/2019-03-08-weplanet_project_04","tags":"next","title":"WePlanet Intern - project NextJS_04"}}},"pageContext":{"refPath":"/blog/2019-03-08-weplanet_project_04","prev":{"frontmatter":{"title":"WePlanet Intern - project NextJS_03","path":"/blog/2019-03-06-weplanet_project_03"}},"next":{"frontmatter":{"title":"2019.03의 RESUME","path":"/blog/2019-03-11-resume"}}}}