{"data":{"site":{"siteMetadata":{"title":"RayLog"}}},"pageContext":{"posts":[{"html":"<h1>Puppeteer vs. Selenium</h1>\n<p>이 글에서는 6개월 전에 올라온 <a href=\"https://linuxhint.com/puppeteer_vs_selenium/\">Puppeteer vs. Selenium</a>을 바탕으로 둘을 비교해보려고 한다.</p>\n<p>우선 둘의 가장 큰 특징은 Headless Chrome을 제어할 수 있도록 도와주는 도구이다. Headless Chrome은 뒤에서 언급할 Headless browser의 한 종류로 Chrome 59부터 지원하기 시작한 브라우저이다.</p>\n<p>그래서 현 시점에서 가장 대중적인 Node.js - Puppeteer와 Python - Selenium을 중심으로 Headless Chrome을 제어하는 도구들을 비교해보도록 할 것이다.</p>\n<ul>\n<li>\n<p><a href=\"https://pptr.dev/\">Puppeteer</a></p>\n</li>\n<li>\n<p><a href=\"https://selenium-python.readthedocs.io/\">Selenium</a></p>\n</li>\n</ul>\n<h3>비교</h3>\n<p>가장 주목해야 할 부분은 사람들의 관심도일 것이다. 이런 관심도를 알 수 있는 가장 단편적인 척도는 GitHub을 통해 얻을 수 있는 정보들일테니 이 둘의 현재(17:00) GitHub 정보를 살펴보자.</p>\n<p>Star 수: Puppeteer: 47,872, Selenium: 13,981\nmaster 브랜치의 마지막 커밋 날짜: Puppeteer: 6시간 전, Selenium: 8시간 전\n마지막으로 merge된 풀리퀘스트 날짜: Puppeteer: 7시간 전, Selenium: 1일 전</p>\n<p>단편적으로나마 Puppeteer가 우세하다는 것을 알 수 있다. 하지만 이 결과는 정말 단편적인 결과이기 때문에 '그렇구나'하고 넘어가도록 하자.</p>\n<p>다음으로 살펴볼 내용은 주요 특징이다. 위 글을 토대로 주요 특징을 비교하다보면 자연스럽게 어떤 도구를 선택하면 좋을지가 떠오를 것 같다.</p>\n<ul>\n<li>Puppeteer: Easy Automation, Screenshot Testing, Performance Testing, Web Scraping</li>\n</ul>\n<blockquote>\n<p>장점</p>\n<ol>\n<li>\n<p>Works fine for visual testing.</p>\n</li>\n<li>\n<p>Great for end to end testing.</p>\n</li>\n<li>\n<p>Fast when compared to Selenium.</p>\n</li>\n<li>\n<p>Can take screenshots of webpages.</p>\n</li>\n<li>\n<p>More control over tests through Chrome.</p>\n</li>\n<li>\n<p>Can test offline mode.</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>단점</p>\n<ol>\n<li>\n<p>Supports only JavaScript (Node)</p>\n</li>\n<li>\n<p>Supports only Chrome</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>Selenium: Multi-Language Support, Multi-Platform Support, Recording Tool, Web Scraping</li>\n</ul>\n<blockquote>\n<p>장점</p>\n<ol>\n<li>\n<p>Multi-platform support.</p>\n</li>\n<li>\n<p>Multi-language support.</p>\n</li>\n<li>\n<p>Ability to record tests.</p>\n</li>\n<li>\n<p>Can take screenshots too.</p>\n</li>\n<li>\n<p>Huge community of users.</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>단점</p>\n<ol>\n<li>\n<p>Slow when compared to Puppeteer.</p>\n</li>\n<li>\n<p>Limited control over tests when compared to Puppeteer.</p>\n</li>\n</ol>\n</blockquote>\n<p>살펴보다보니 가장 큰 키워드는 속도(셀레니움 &#x3C; 퍼피티어), 확장성(셀레니움 > 퍼피티어)이라고 생각한다. 속도적으로는 Chrome과 연동해 가장 효율적으로 사용할 수 있는 Puppeteer가 우세하고, 확장성 측면에서는 다양한 언어와 다양한 플랫폼을 지원하는 Selenium이 좋아보인다.</p>\n<p>내가 만들고자 하는 웹 크롤러는 국내만이 아닌 중국을 겨냥하고 있기 때문에, 크롬이 아닌 다른 플랫폼에서도 동작 가능해야 할 것 같다.</p>\n<p>그래서 결론을 내보자면 속도나 트렌드적으로는 Puppeteer가 맞는 선택이겠지만, 내가 구현하려고 하는 크롤러는 확장성을 완전히 배제할 수 없기 때문에 Selenium쪽으로 포커싱해서 구현하고, 언어는 Python을 이용해야 하는 것이 좋아보인다.</p>","id":"98e7ae88-d7e9-5200-80f5-65398144a869","timeToRead":2,"frontmatter":{"date":"April 12, 2019","path":"/blog/2019-04-12-puppeteer_vs_selenium","tags":"infra","title":"Puppeteer vs. Selenium"}},{"html":"<h1>WePlanet Intern - study - Agile</h1>\n<h2>이번 스터디 목표</h2>\n<p>이번에 진행할 프로젝트인 node 웹 크롤러에 대한 설계를 진행하고자 한다. 더불어 현재는 계획이 러프하게 되어있어서 <a href=\"https://ko.wikipedia.org/wiki/%EC%95%A0%EC%9E%90%EC%9D%BC_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EA%B0%9C%EB%B0%9C\">Agile 개발 방법론</a>을 통해 개발을 진행할 것이다.</p>\n<p>그렇다면 가장 기본적으로 Agile이란 무엇인지, 어떻게 수행해야 하는지에 대해 학습하고 이를 실천해보도록 하자.</p>\n<h3>Agile Software Develpments란?</h3>\n<p>우선 Agile은 아무런 계획이 없는 개발 방법(주먹구구식 개발)과 계획이 지나치게 많은 개발 방법(계획 기반 개발) 사이에서 타협점을 찾고자 하는 방법론이다.</p>\n<p>앞서 설명한 양 극단의 개발 방법론은 각각의 단점이 존재했기 때문에 개발을 진행함에 있어 걸림돌이 되곤 했다. 그래서인지 사람들은 이를 해결하기를 원했고 Agile을 생각하게 된다.</p>\n<p>우선 계획이 없는 방법론의 경우에는 앞으로의 일을 예측하기 힘들고 효율적이지 못하다는 취약점을 가지고 있으며, 계획에 의존적인 경우는 그 형식적인 절차(업무 보고부터 구체적인 시간 관리 계획 수립 등)를 따르는데 필요한 시간과 비용, 업무적 스트레스를 무시할 수 없었기 때문에 전체적인 개발의 흐름 자체가 느려지는 단점을 가지고 있다.</p>\n<p>그렇기 때문에 앞서 언급한 Agile, 애자일을 활용해 이를 해결하고자 한 것이다. 물론 개발 방법론은 은 총알(Silver Bullet)이 존재하지 않기 때문에 각 상황에 따라 앞서 언급한 방법이 옳을 때가 있으니 애자일이라고 마냥 옳은 것이 아니라는 점을 염두해두자.</p>\n<p>애자일의 가장 큰 특징은 문서를 통한 개발 방법(기획서, 요구 명세서 등)이 아닌 실질적인 코딩을 통한 방법론이라는 점이다.</p>\n<p>그러므로 애자일은 계획을 통해서 주도해 나갔던 과거의 방법론들과는 다르게 앞을 예측하며 개발하지 않고, 일정한 주기를 가지고 끊임없이 프로토 타입을 만들어내며 그때 그때 필요한 요구를 더하고 수정하여 하나의 커다란 소프트웨어를 개발해나가는 것이라고 할 수 있다.</p>\n<p>그래서 많은 스타트업 혹은 소규모 팀에서는 하나의 주기를 버전으로 삼아 버저닝을 진행하기도 한다.</p>\n<p>그리고 하나 중요한 사실은 애자일 개발 프로세스는 하나의 방법론을 이야기하는 것이 아닌 \"Agil(기민한) 개발을 가능하게 하는 다양한 방법들\"을 이야기 한다는 것이다.</p>\n<p>그래서 XP니 칸반이니 스프린트니 하는 다양한 방법들이 모두 애자일에 속한다고 할  수 있다. 그래서 \"우리 회사는 칸반만 하는데 이것도 애자일이냐?\"라고 하면 당연히 맞다고 할 수 있다.</p>\n<h3>종류</h3>\n<p>이제는 애자일 개발 프로세스로 불리는 개발 방법론들을 살펴보고 지금 나에게 맞는 방법론은 무엇이 있을까에 대해 고민해보도록 하려고 한다.</p>\n<p>물론 여기서는 모든 애자일 방법론을 적지는 못하고, 가장 유명한 XP(Extreme Programming)과 스크럼에 대해서만 알아보려고 한다.</p>\n<p>둘의 특징은 다음과 같다.</p>\n<ul>\n<li>\n<p>익스트림 프로그래밍(XP): 애자일 개발 프로세스의 대표자로 애자일 개발 프로세스의 보급에 큰 역할을 하였다. 이 방법은 고객과 함께 2주 정도의 반복개발을 하고, 테스트 주도 개발(TDD)을 특징으로 하는 명시적인 기술과 방법을 가진다.</p>\n</li>\n<li>\n<p>스크럼: 30일마다 동작 가능한 제품을 제공하는 스프린트를 중심으로 한다. 매일 정해진 시간에 정해진 장소에서 짧은 시간의 개발을 하는 작은 팀을 위한 프로젝트 관리 중심의 방법론이다.</p>\n</li>\n</ul>\n<h3>결론</h3>\n<p>정리해보면, 전자의 경우는 2주 정도의 반복 개발과 TDD를 중심으로 개발하고, 후자의 경우는 30일을 기점으로 동작 가능한 제품을 제공하고, 매일 일정과 현황을 공유한다고 한다.</p>\n<p>지금 내가 구현하려고 하는 웹 크롤러는 초기 완성물(MVP)의 완성도가 낮기 때문에 전자와 같이 2주 정도의 기간동안 개발하는 것으로 하려고 한다.</p>\n<p>더불어 WePlanet에서는 매일 아침 일정과 현황을 공유한다. 따라서 조금 정리해보면, 2주동안 동작 가능한 제품을 제공하는 스프린트를 중심으로 하되, 매일 정해진 시간에 정해진 장소에서 일정과 현황을 공유할 것이다.</p>\n<p>물론 TDD를 하면 좋지만, MVP의 완성도가 낮기 때문에 처음에는 TDD가 아닌(사실 잘 하지 못하기 때문) 일반적인 개발 플로우를 따르려고 한다.</p>","id":"46bdec47-9f68-5b06-bc2a-8c435787d601","timeToRead":2,"frontmatter":{"date":"April 12, 2019","path":"/blog/2019-04-12-weplanet_study_agile","tags":"infra","title":"WePlanet Intern - study agile"}},{"html":"<h1>WePlanet Intern - study - Docker</h1>\n<h2>이번 스터디 목표</h2>\n<p><a href=\"https://aws.amazon.com/ko/docker/\">AWS - Docker란 무엇입니까?</a>를 참고하여 Docker에 대한 학습을 하는 것이 이번 스터디의 목적이다.</p>\n<p>사실 이번에 시작한 프로젝트에서 Docker를 사용하기 때문에 이를 학습하여 보다 나은 이해를 하고자 함이다.</p>\n<p>우선 위에서 언급한 <a href=\"https://aws.amazon.com/ko/docker/\">AWS - Docker란 무엇입니까?</a>를 살펴보면\nDocker의 정의, 작동 방식, 사용해야 하는 이유, 사용하는 경우 등을 설명한다. 그래서 우리도 마찬가지로 이것들을\n살펴보고 어떻게 하면 도커를 잘 사용할 수 있을지를 생각해보자.</p>\n<p>언제나 말하지만 기술은 그냥 사용하는 게 아닌 '잘' 사용해야 하기 때문이다.</p>\n<p><a href=\"https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html\">참고자료 - 초보를 위한 도커 안내서</a></p>\n<h3>Docker란 무엇인가?</h3>\n<p>우선 Docker는 애플리케이션을 신속하게 구축, 테스트 및 배포할 수 있는 소프트웨어 플랫폼이다.</p>\n<p>소프트웨어를 컨테이너라는 표준화된 유닛으로 패키징하며, 이 컨테이너에는 라이브러리, 시스템 도구, 코드, 런타임 등\n소프트웨어를 실행하는 데 필요한 모든 것이 포함되어 있다.</p>\n<p>그래서 Docker를 사용하면 개발 환경에 구애받지 않고 애플리케이션을 신속하게 배포 및 확장할 수 있다.\n즉, Docker를 사용하면 서비스마다 다른 개발 환경에 대한 스트레스가 줄어든다는 의미가 될 것이다.</p>\n<h3>Docker의 작동 방식</h3>\n<p><img src=\"https://d1.awsstatic.com/Developer%20Marketing/containers/monolith_2-VM-vs-Containers.78f841efba175556d82f64d1779eb8b725de398d.png\"></p>\n<p>Docker는 코드를 실행하는 표준 방식을 제공하기 때문에 개발 환경에 구애받지 않고, 운영체제가 달라져도\n어렵지않게 애플리케이션을 신속하게 구축, 테스트 및 배포할 수 있는 것이다.</p>\n<p>그래서 Docker는 컨테이너를 위한 운영 체제라고 할 수 있다. 기존의 가상 머신(VMWare 등)과 유사하게 컴퓨팅 파워(서버 하드웨어)를\n가상화하지만 실제로 모든 것을 가상화하는 것이 아니라 '이미지'라는 단위를 통해 최소한으로 가상화하는 방식이다.</p>\n<p>이렇게 가상화된 단위를 '컨테이너'라고 부르는데, 이해를 돕자면 '이미지'를 통해 컨테이너를 추상화해놓고 필요할 때마다\n이미지를 바탕으로 컨테이너를 구성하는 것을 말한다고 할 수 있다.</p>\n<p>여기까지 설명하면 사실 감이 잘 오지 않을 것이다. 그래서 지금은 완전히 이해한다는 마음보다는 'Docker는 이렇게 동작하는구나' 정도로 이해하고\n넘어가도록 하자.</p>\n<h3>Docker를 사용해야 하는 이유</h3>\n<p>Docker를 사용하면 코드를 더 빨리 전달하고, 애플리케이션 운영을 표준화하고, 코드를 원활하게 이동하고, 리소스 사용률을 높여 비용을 절감할 수 있다고 한다.</p>\n<p>따라서 Docker를 사용하면 어디서나 안정적으로 실행할 수 있는 단일 객체를 확보할 수 있고, 간단한 Docker 구문으로 이를 완벽하게 제어할 수 있다. 이를 정리하면 다음과 같다.</p>\n<ul>\n<li>\n<p>더 많은 소프트웨어를 더 빨리 제공: Docker를 사용하면 필요할 때마다 격리돤 서비스를 제공할 수 있어 상대적으로 더 많은 소프트웨어를 더 빨리 제공할 수 있다.  </p>\n</li>\n<li>\n<p>운영 표준화: 컨테이너 기반 애플리케이션을 사용하면 손쉽게 배포하고, 문제를 파악할 수 있으며, 수정을 위해 롤백을 할 수도 있다.</p>\n</li>\n<li>\n<p>원활한 이전: Docker 기반 애플리케이션을 로컬 개발 환경에서 프로덕션 환경으로 원활하게 배포할 수 있다.</p>\n</li>\n<li>\n<p>비용 절감: 각 서버에서 좀 더 쉽게 더 많은 코드를 실행하여 사용률을 높이고 비용을 절감할 수 있다.</p>\n</li>\n</ul>\n<h3>Docker를 사용하는 경우</h3>\n<p>Docker 컨테이너를 최신 애플리케이션 및 플랫폼을 생성하는 핵심 빌딩 블록으로 사용할 수 있다.\n따라서 Docker를 사용하면 분산 마이크로 서비스 아키텍처를 구축 및 실행하고, 표준화된 지속적 통합 및 지속적 전달 파이프라인을 통해 코드를 배포하고, 고도로 확장 가능한 데이터 처리 시스템을 구축하고, 개발자를 위한 완전관리형 플랫폼을 생성할 수 있다.</p>\n<p>그래서 Docker는 대체로 마이크로 서비스, CI/CD, 대량의 데이터 처리, 컨테이너 서비스 등에 사용한다.</p>\n<h3>마지막으로</h3>\n<p>이제는 어느정도 도커를 사용하는 이유와 사용하면 좋은 점을 이해했다고 할 수 있다. 그러니 이제부터는 별도의 프로젝트를 통해 어떻게 하면 도커를 '잘' 사용할 수 있을지를 고민해보자.</p>","id":"01b65ebf-0153-5c95-83b0-91d639d7bbd2","timeToRead":2,"frontmatter":{"date":"April 08, 2019","path":"/blog/2019-04-08-weplanet_study_docker","tags":"infra","title":"WePlanet Intern - study docker"}}],"tag":"infra","pagesSum":1,"page":1}}