{"data":{"site":{"siteMetadata":{"title":"RayLog","siteUrl":"https://rayleighko.github.io"}},"markdownRemark":{"html":"<h1>Parameter`s Default value</h1>\n<p>앞서 <strong>Function Overloading</strong>에 관해 설명했다. 그런데 Cpp에서의 함수에는 <strong>'Default'</strong>라는 우리도 흔히 접해 본 값을 설정할 수 있다. 혹시 몰라 설명하자면 여기서의 default는 <strong>'기본적으로 설정되어 있는 값'</strong>을 의미한다(일단은 이 정도만 이해해도 괜찮다).</p>\n<hr>\n<p>Cpp에서는 <strong>Function Parameter</strong>를 아래와 같이 선언하는 것이 가능하다.</p>\n<p>{% highlight Cpp %}</p>\n<p>int FuncOne(int num=7)\n{\nreturn num + 1;\n}</p>\n<p>int funcTwo(int num1=5, int num2=7)\n{\nreturn num1+num2;\n}</p>\n<p>{% endhighlight %}</p>\n<p>여기서 <strong>funcOne의 Parameter Declaration</strong>은 다음과 같은 의미를 지닌다.</p>\n<blockquote>\n<p>\"Function Call 시 Parameter를 전달하지 않으면 7이 전달된 것으로 간주한다.\"</p>\n</blockquote>\n<p>따라서 Function call 시 <code class=\"language-text\">FuncOne();</code>과<code class=\"language-text\">FuncOne(7);</code>, 두 함수 호출문은 동일한 의미를 지닌다.</p>\n<p>또한, FuncTwo의 Parameter 선언은 다음과 같은 의미를 지닌다.</p>\n<blockquote>\n<p>\"Function call 시 Parameter를 전달하지 않으면 num1에 5가, num2에 7이 전달된 것으로 간주하겠다.\"</p>\n</blockquote>\n<p>따라서 <code class=\"language-text\">funcTwo();</code>와 <code class=\"language-text\">funcTwo(5, 7);</code>, 두 함수 호출문은 같다.</p>\n<p>그럼 실제 예제를 통해 자세히 알아보자.</p>\n<p>{% highlight Cpp %}</p>\n<h1>include <iostram></h1>\n<p>int Adder(int num1=1, int num2=2)\n{\nreturn num1 + num2;\n}</p>\n<p>int main (void)\n{\nstd::cout &#x3C;&#x3C; Adder() &#x3C;&#x3C; std::endl;\nstd::cout &#x3C;&#x3C; Adder(5) &#x3C;&#x3C; std::endl;\nstd::cout &#x3C;&#x3C; Adder(3,5) &#x3C;&#x3C; std::endl;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return 0;</code></pre></div>\n<p>}</p>\n<p>{% endhighlight %}</p>\n<p>위 예제를 통해 아래와 같은 사실을 추가로 확인할 수 있다.</p>\n<blockquote>\n<p>\"Parameter에 Default value가 설정되어 있으면, <strong>Declaration된 Parameter의 수</strong>보다 <strong>적은 수</strong>의 Parameter전달이 가능하다(예를 들어, <strong>Parameter</strong>이 3개 정의되어 있으면 2개의 <strong>Default value</strong>를 설정할 수 있다).</p>\n<p>그리고 전달되는 Parameter는 <strong>왼쪽부터</strong> 채워져 나가고, 부족분은 <strong>Default value</strong>로 채워진다.\"</p>\n</blockquote>\n<p><code class=\"language-text\">이와 더불어 **Default value**은 **Function Declaration** 부분에만 표현하면 된다는 것도 알 수 있다(물론, 별도의 **Declaration**이 필요한 경우이다).</code><br>\n<code class=\"language-text\">또한, 부분적으로 **Default value**를 설정하고 싶을 때(예를 들어 3개의 Parameter 중에 2개의 Parameter에만 값(Value)을 전달하고 싶을 때)는 **오른쪽**에서부터 채워야한다는 것을 유의해야한다. 그 이유는 아래에 설명할 **&#39;Default value의 유의미성&#39;**을 위해서이다.</code></p>\n<blockquote>\n<p><strong>Default value의 유의미성</strong>: 가령, <code class=\"language-text\">int Func(int num1=12, int num2, int num3){ ... }</code>라는 함수에 20, 30이라는 Parameter를 전달한다고 가정해보자.</p>\n<p>이때 Default value가 의미를 지니기 위해선 num2와 num3에 <strong>Parameter</strong>를 전달해야 하는데 <strong>Parameter</strong>는 앞에서부터 채워지기 때문에 불가능해 결과적으로 <strong>num1에 20이, num2에 30이 전달</strong>된다. 그래서 무의미한 Default value를 방지하고자 오른쪽에서부터 Default value를 채워야한다는 것이다.</p>\n</blockquote>","frontmatter":{"date":"July 05, 2017","path":"/blog/2017-07-05-c++-study-3","tags":"cpp","title":"Cpp 기본 개념_3"}}},"pageContext":{"refPath":"/blog/2017-07-05-c++-study-3","prev":{"frontmatter":{"title":"Cpp 기본 개념_1","path":"/blog/2017-07-03-c++-study-1"}},"next":{"frontmatter":{"title":"Cpp 기본 개념_2","path":"/blog/2017-07-05-c++-study-2"}}}}