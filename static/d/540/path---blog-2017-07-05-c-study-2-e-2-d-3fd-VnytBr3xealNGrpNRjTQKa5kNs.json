{"data":{"site":{"siteMetadata":{"title":"RayLog","siteUrl":"https://rayleighko.github.io"}},"markdownRemark":{"html":"<h1>Function Overloading</h1>\n<p>필자는 C를 처음 접할 당시에는 정말 재미가 없었다. 그런데 어느 순간 재미있기 시작했는데, 그 순간이 바로 <strong>함수</strong>를 배우고 난 이후였다.<br>\nn\n그래서 나름 <strong>function</strong>에 대해서 대해서 애정이 있는데, 일반적인 <strong>C</strong>에서는 다음과 같이 동일한 이름의 함수가 정의되는 것을 허용하지 않는다.</p>\n<p>{% highlight Cpp %}</p>\n<p>int Func(int num)\n{\nnum++;\nreturn num;\n}</p>\n<p>int Func(int a, int b)\n{\nreturn a+b;\n}</p>\n<p>{% endhighlight %}</p>\n<p>그런데 개발자들은 허용되지 않는 위의 두 함수를 보고 의문을 품었다. 그들은 <strong>Parameter</strong>나 <strong>Return type</strong>이 서로 다르다면 동일한 이름의 함수를 사용하는 것이 가능하다고 생각하게 되었고, 이를 C++에 적용했다.</p>\n<p>{% highlight Cpp %}</p>\n<p>int main()\n{\nFunc(20); //Func(int num) 함수의 호출\nFunc(20, 30); //Func(int a, int b) 함수의 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return 0;</code></pre></div>\n<p>}</p>\n<p>{% endhighlight %}</p>\n<p>위의 주석에서도 알 수 있듯이 <strong>Function Call</strong> 시 전달되는 인자를 통해서 호출하고자 하는 함수의 구분이 가능하다. 그렇기 때문에 Parameter의 선언형태가 다르다면, <strong>동일한 이름</strong>의 함수를 정의할 수 있다는 것이 이해될 것이다.</p>\n<p>실제로 C++에서는 이를 허용하며 이를 <strong>함수 오버로딩(Function Overloading)</strong>이라 부른다. 또한, 다음과 같은 의문이 들 수도 있다.</p>\n<blockquote>\n<p>이런 방법이 예전부터 논의되어 왔을텐데 왜 <strong>C++</strong>은 <strong>Function Overloading</strong>을 허용하고, <strong>C</strong>는 허용하지 않는 것일까? 여기에 대한 <strong>답은 함수를 찾는 방법이 서로 다르기 때문</strong>이라고 할 수 있다.</p>\n</blockquote>\n<p><strong>C++</strong>은 호출할 함수를 찾을 때 <strong>'Function name'</strong>과 <strong>'Parameter 선언(Declaration)'</strong>의 두 가지 정보를 동시에 활용한다. 반면에 <strong>C</strong>는 <strong>'Function name'</strong>만을 이용해서 호출대상을 찾는다.</p>\n<p>때문에 C에서는 함수의 Overloading이 불가능하며, 이를 문법적으로 허용하지 않는다. 또한, <strong>Function Overloading</strong>이 가능한 것은 <strong>Paramerter Declaration이 다르거나 Returntype이 다른 경우에만 사용</strong>할 수 있다.</p>","frontmatter":{"date":"July 05, 2017","path":"/blog/2017-07-05-c++-study-2","tags":"cpp","title":"Cpp 기본 개념_2"}}},"pageContext":{"refPath":"/blog/2017-07-05-c++-study-2","prev":{"frontmatter":{"title":"Cpp 기본 개념_1","path":"/blog/2017-07-03-c++-study-1"}},"next":false}}