{"data":{"site":{"siteMetadata":{"title":"RayLog","siteUrl":"https://rayleighko.github.io"}},"markdownRemark":{"html":"<h1>WePlanet Intern - study</h1>\n<h3>앞으로의 계획 및 목표</h3>\n<ul>\n<li>익숙하지 않은 Javascript(ES6, ES7, ES8) 문법 이해, React, Node(Express) 문법 및 각종 라이브러리의 메서드(파리미터, 결과 중심) 이해</li>\n<li>매일 어제와 오늘의 스터디 내용 (일일 회의(매일 10시 예정) 시) 공유</li>\n<li>모든 스터디 내용은 마크다운으로 작성, 블로그에 기재</li>\n</ul>\n<h3>스터디 초점 및 유의사항</h3>\n<ul>\n<li>나의 기술에 대한 이해도 향상(문법적으로 어떤 문장을 적음에 있어 '왜 이 문장을 사용해야 했는지'에 대한 명쾌한 해답을 내릴 수 있을 정도) 및 Front-end 개발에 있어 필요한 덕목을 갖추도록 하자.</li>\n<li>리펙터링 생각해보기(코드는 완성된 그 순간 레거시, 그렇기 때문에 나라면 어떻게 구현했을지 혹은 어떻게 하면 질좋은 코드를 만들 수 있을지 생각해보기)</li>\n<li>\n<p>동료의 시간을 낭비시키지 말자.</p>\n<ul>\n<li>검색이 가능한 것에 대해서는 질문을 하지않고 스스로(구글링, 서적 열람 등) 해결하도록 하자.</li>\n<li>만약 질문이 필요하다면 어떻게 해서 그런 질문을 하게 됐는지에 대해서도 말해야 할 것이다.</li>\n<li>질문을 잘하는 개발자 - <a href=\"https://jbee.io/essay/good_questionor/\">https://jbee.io/essay/good_questionor/</a> 참고</li>\n</ul>\n</li>\n<li>참고자료는 링크 및 URI로 해당 문서에 공유하도록 하자.</li>\n</ul>\n<h3>스터디 목차 및 설정 이유(중점적으로 살펴볼 내용 명시)</h3>\n<ol>\n<li>\n<p>JS 문법 학습: 구현만 가능하다고 적재적소에 원하는 코드를 삽입할 수는 없을 것이라는 생각이 있었기 때문에, 이를 해결하기 위해서 JS의 문법을 다시 한 번 학습하고자 하는 필요성을 느꼈다. 하지만 아주 기본적인 단계를 다시 학습하는 건 불필요하다는 생각이 있기 때문에 기본 문법 및 매커니즘 등의 이해는 건너뛴다.</p>\n<ol>\n<li>ES3(ES1999): 기본적인 문법을 제외한 함수 단위의 스코프, 호이스팅, 클로저, 프로토타입 등</li>\n<li>ES5(ES2009): forEach, map, reduce, filter, some, every와 같은 순환 메소드, 객체의 프로퍼티 설정(생성, 수정, 복사하는 표준 메소드&#x3C;Object.Create(), Object.defineProperty(), Object.freeze(), Object.assign()> 등과 getter, setter, Object.key() 메소드), strict 모드(use strict), bind() 메소드 등</li>\n<li>ES6(ES2015): 호이스팅이 사라진 것 같은 효과, 함수 단위 스코프에서 블록 단위 스코프로 변경됨, this를 동적으로 바인딩하지 않는 화살표 함수, 모듈화 지원, 콜백 지옥에서 구원해줄 Promise, Default와 Rest 파라미터, 해체 할당, Spread 연산자, 템플릿 리터럴, 클래스, 기타 여러 사항(브라우저에서 지원하지 않는 문법 등을 처리하는 트랜스파일러(Babel)과 모듈화를 사용하기 위한 모듈 번들러(WebPack)의 등장, Nodejs의 부상 JS 진영의 생태계 진화에 따라 만들어진 문법) 등</li>\n<li>ES7(ES2016): 제곱 연산자(**), Array.includes 배열에 해당 요소가 존재하는지 확인하는 메소드</li>\n<li>ES8(ES2017): async와 await, 객체의 심화된 메소드(Object.entries(), Object.getOwnPropertDescriptors()(Object.getOwnPropertyDescriptor의 복수 형태), 문자열(편의 기능 추가 -> 문자열 앞부분에 공백을 넣어 자리수를 맞추는 String.padStart(), 문자열 뒷부분에 공백을 넣어 자리를 맞추는 String.padEnd()), 매개변수 마지막에 콤마를 붙이는 걸 허용</li>\n<li>ES9(ES2018): 구조 분해 할당(Spread)(… 키워드), Promise finally(then과 catch 외에도 finally가 추가되었다. 성공, 실패 여부와 상관없이 무조건 실행되는 메서드), Async iteration(async 문법을 생성기랑 for of 문에서도 사용 가능해졌다.), 정규표현식의 강화(lookbehind가 생기고 캡쳐링 그룹에 이름을 지정해 줄 수 있다.), </li>\n</ol>\n</li>\n<li>\n<p>리펙터링을 한다는 마음으로 사내 코드 읽기: 사내 코드의 규율 적응 및 모르는 라이브러리의 메서드 및 컴포넌트의 학습이 필요하다고 느꼈기 때문에, 이를 해결하기 위해 사내의 코드를 읽고, 읽은 코드를 바탕으로 학습할 내용을 정리할 것이다. 물론 사내의 코드를 공유하지는 않을 것이다.</p>\n</li>\n</ol>","frontmatter":{"date":"March 05, 2019","path":"/blog/2019-03-05-weplanet_study_plan","tags":"js","title":"WePlanet Intern - Js study_계획"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"refPath":"/blog/2019-03-05-weplanet_study_plan","prev":{"frontmatter":{"title":"WePlanet Intern - project NextJS_02","path":"/blog/2019-03-05-weplanet_project_02"}},"next":{"frontmatter":{"title":"WePlanet Intern - project NextJS_03","path":"/blog/2019-03-06-weplanet_project_03"}}}}