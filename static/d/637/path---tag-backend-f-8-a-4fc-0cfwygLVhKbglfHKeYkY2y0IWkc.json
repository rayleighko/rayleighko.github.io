{"data":{"site":{"siteMetadata":{"title":"RayLog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"html":"<h2>개발 문서 작성기</h2>\n<h3>현재 상황</h3>\n<p>이번에는 개발팀 내의 문서화 작업에 대한 고민을 하게 되었다. 그 이유는 CEO인 Daniel이 개발 팀 내에 따로 문서를 정의하고 있지 않아, 이번 기회에 문서화 작업을 해보자는 의견이 있었기 때문이다.</p>\n<p>현재는 각자의 스타일대로 코드를 작성하고, API나 DB 구조를 구현하고 있다. 물론, 이는 각자의 개성이나 취향이기 때문에 욕할 수 있는 부분은 아니다. 하지만, 만약 그 프로젝트를 본인이 아닌 타인 그러니까 co-worker가 본다면 단번에 이해할 수 없는 부분이 있을 것이기 때문에 이를 위해 문서화 작업이 필요한 것이다.</p>\n<p>따라서 인턴 기간동안 진행하는 문서화 작업의 기록을 이 문서를 통해 공유해보고자 한다.</p>\n<h3>무엇을? 어떻게?</h3>\n<p>앞서 '현재 상황'에서는 '왜?'에 대한 질문의 답을 했다. 따라서 이제 개발 문서를 '왜' 만드는지를 이해했다. 하지만 개발 문서를 작성하는 것을 해본 적이 없는 나는 당연히 개발 문서에 무엇이 들어가야 하고, 어떻게 그것들을 정의할 것인지에 대한 의문이 들었다.</p>\n<p>그래서 이번 섹션에서는 개발 문서에 들어갈 '무엇'과 '어떻게' 작성되어야 하는지에 대해 알아보도록 하자.</p>\n<p>본격적인 작성에 앞서 내가 참고한 문서는 다음과 같다.</p>\n<p><a href=\"http://sce2.umkc.edu/BIT/burrise/pl/appendix/Software_Documentation_Templates/\">http://sce2.umkc.edu/BIT/burrise/pl/appendix/Software<em>Documentation</em>Templates/</a></p>\n<p><a href=\"https://github.com/nhnent/fe.javascript\">https://github.com/nhnent/fe.javascript</a></p>\n<p><a href=\"https://coderlife.tistory.com/237\">https://coderlife.tistory.com/237</a></p>\n<p>제일 처음에 있는 문서는 포멀한 가이드인 것 같아서 대충 읽어봤다. 그러고 나서 3번째 문서를 살펴보니 개발 문서는 개발팀의 성향에 따라 다르며, 달라져야 한다는 것을 알게되었다. 마냥 좋은 것을 따라한다고 소고기 안먹는 사람들끼리 소고기를 어떻게 먹어야 잘 먹는지를 이야기하는 것만큼 의미없는 것일테니 말이다.</p>\n<p>그러다가 2번째 문서를 보면서 조금이나마 힌트를 얻었다. 우선 나는 문서의 형태를 프론트엔드 전반, 백엔드 전반, 각 프로젝트 별 추가적인 사항으로 나누고, 프로젝트 별 추가적인 사항은 다시 프론트엔드와 백엔드로 나눠 기재하려고 했다.</p>\n<p>그러다보니 자연스럽게 어떻게 하면 개발자가 보기 편할지를 고민하게 되었고, 그 핵심은 필요로하는 필수 내용만 적는 것이라고 판단해 작성하게 되었다.</p>\n<p>그래서 우선 FE(Frontend) JS 개발 가이드와 BE(Backend) JS 개발 가이드를 만들어 여기에서는 각각의 JS의 커딩컨벤션, 디버깅, 테스트 등에 해당하는 내용을 기재하게 되었다.</p>\n<p>그러고 나서 각각의 프로젝트에 해당하는 내용을 기재했고, 이것은 해당 프로젝트 개발자의 취향 및 역량에 따라 달리해야 한다는 생각이 들어서 우선은 해당 내용에 대한 템플릿을 작성하는 일을 멈췄다.</p>\n<p>JS 개발 가이드에 참고한 문서는 다음과 같다.</p>\n<p><a href=\"http://crockford.com/javascript/\">http://crockford.com/javascript/</a></p>\n<p><a href=\"https://google.github.io/styleguide/jsguide.html\">https://google.github.io/styleguide/jsguide.html</a></p>\n<p>위 두 문서는 더글라스 크락포드의 JS 가이드와 Google의 JS Styleguide인데, 둘 다 많은 회사들이 JS에 대한 기술 문서를 작성할 때 많이 참고할 것 같아서 흝어보게 되었다. 이 두 문서는 앞으로도 계속 참고해야 할 것만 같으니 다음에 기회가 되면 정독해보도록 할 것이다.</p>\n<h3>결론</h3>\n<p>결과적으로 FE JS 가이드, BE JS 가이드, 프로젝트 별 가이드로 나누었고, 이를 마크다운으로 정리했다. 더불어 개발 문서이기 때문에 이것을 처음 읽는 사람의 입장에서 '이걸 왜 읽어야 하지?'라는 의문을 해결하기 위해 문서화를 하는 목적, 수정 방법 등을 명시해두었다.</p>\n<p>여기까지의 소감은 하루동안 작성했기 때문에 너무 대충 적었다는 자기 반성과 앞으로 프로젝트를 진행하며 갈고 닦아야 한다는 의지를 볼 수 있었다는 것이다.</p>","id":"4eb8acda-dda8-5a14-90a5-9610c8e09afe","timeToRead":2,"frontmatter":{"date":"March 20, 2019","path":"/blog/2019-03-20-weplanet_documents_01","tags":"backend","title":"WePlanet Intern - 개발 문서 작성기"}},{"html":"<h2>Node Backend API 서버 - Web Storage</h2>\n<h3>현재 상황</h3>\n<p>이번에 진행하는 프로젝트의 백엔드 부분을 살펴보고 있다. 현재 API 서버를 구현해 Localstorage 방식으로 토큰(AccessToken, refreshToken)을 교환하기 때문에 이에 대해 학습할 필요가 있다고 느꼈다.</p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\">참고자료 - 1 Mozilla, Web<em>Storage</em>API </a></p>\n<p><a href=\"https://www.zerocho.com/category/HTML&#x26;DOM/post/5918515b1ed39f00182d3048\">참고자료 - 2 로컬스토리지, 세션스토리지</a></p>\n<h3>Sessionstorage와 Localstorage의 차이</h3>\n<p>참고자료 1에 따르면 Web Storage는 위의 두 방식이 있고, 이 둘의 차이는 다음과 같다고 한다.</p>\n<ul>\n<li>sessionStorage는 페이지의 세션이 유지되는동안 사용할 수 있는 각 origin별로 별도의 스토리지를 관리합니다. (페이지 리로딩 및 복원을 포함한, 브라우저가 열려있는 한 최대한 긴 시간동안)</li>\n<li>localStorage도 같은 일을 하지만, 브라우저가 닫히거나 다시 열리더라도 유지합니다.</li>\n</ul>\n<p>이런 정보를 바탕으로 참고자료 2와 함께 둘의 차이점을 '영구성'이라고 정의할 수 있겠다.</p>","id":"21775b00-c9a0-54d1-a806-503820614efa","timeToRead":1,"frontmatter":{"date":"March 20, 2019","path":"/blog/2019-03-20-weplanet_project_08","tags":"backend","title":"WePlanet Intern - project Backend_01"}}],"tag":"backend","pagesSum":1,"page":1}}