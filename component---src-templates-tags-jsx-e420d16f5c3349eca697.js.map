{"version":3,"sources":["webpack:///./src/templates/Tags.jsx","webpack:///./src/shapes/site.js","webpack:///./src/components/TagsList.js","webpack:///./src/shapes/page-context.js","webpack:///./src/components/CenterWrap.js","webpack:///./src/components/LogPosts.js"],"names":["Tags","_ref","_ref$pageContext","pageContext","posts","tag","site","data","siteMetadata","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_CenterWrap__WEBPACK_IMPORTED_MODULE_5__","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","a","title","length","_components_LogPosts__WEBPACK_IMPORTED_MODULE_8__","propTypes","PropTypes","shape","siteShape","isRequired","pageContextShape","tagsQuery","prop_types__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","prop_types__WEBPACK_IMPORTED_MODULE_0___default","n","string","description","Small","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__","target","name","styles","A","Link","theme","textDecoration","color","textColor","transition",":hover","accentColor","CommaSeparatedTags","_ref2","tags","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","split","map","index","array","key","to","defaultProps","d","__webpack_exports__","context","oneOfType","bool","frontmatter","path","next","prev","assign","centerPadding","Header","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_5__","display","flexDirection","justifyContent","alignItems","smallMedia","H3","_ref3","marginBottom","spacing","Article","_ref4","H4","GatsbyLink","_ref5","LogList","_ref6","grouped","groupBy","p","last","date","groupPosts","years","keys","sort","reverse","_emotion_core__WEBPACK_IMPORTED_MODULE_6__","year","post","dateTime","dateformat","_TagsList__WEBPACK_IMPORTED_MODULE_13__","arrayOf","node"],"mappings":"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","file":"component---src-templates-tags-jsx-e420d16f5c3349eca697.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport Layout from '../components/layout'\nimport CenterWrap from '../components/CenterWrap'\nimport pageContextShape from '../shapes/page-context'\nimport siteShape from '../shapes/site'\nimport Posts from '../components/LogPosts'\n\nconst Tags = ({\n  pageContext: { posts, tag },\n  data: {\n    site: { siteMetadata: site },\n  },\n}) => (\n  <Layout>\n    <CenterWrap>\n      <Helmet>\n        <title>\n          {tag} &middot; {site.title}\n        </title>\n      </Helmet>\n      <h2>{tag}</h2>\n      <section>\n        {posts.length} {posts.length !== 1 ? 'posts' : 'post'} in {tag}.\n      </section>\n      <section>\n        <Posts posts={posts} />\n      </section>\n    </CenterWrap>\n  </Layout>\n)\n\nTags.propTypes = {\n  data: PropTypes.shape({\n    site: siteShape,\n  }).isRequired,\n  pageContext: pageContextShape.isRequired,\n}\n\nexport default Tags\n\nexport const tagsQuery = graphql`\n  query TagsSiteMetadata {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","import PropTypes from 'prop-types'\n\nexport default PropTypes.shape({\n  siteMetadata: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n  }).isRequired,\n}).isRequired\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport styled from '@emotion/styled'\n\nconst Small = styled.small({\n  textTransform: 'uppercase',\n})\n\nconst A = styled(Link)(({ theme }) => ({\n  textDecoration: 'none',\n  color: theme.textColor,\n  transition: 'color 250ms linear',\n  ':hover': {\n    textDecoration: 'underline',\n    color: theme.accentColor,\n  },\n}))\n\nconst CommaSeparatedTags = ({ tags }) => (\n  <Small>\n    Topics:{' '}\n    {tags.split(', ').map((tag, index, array) => (\n      <span key={tag}>\n        <A to={`/tag/${tag}/`}>{tag}</A>\n        {index < array.length - 1 ? ', ' : ''}\n      </span>\n    ))}\n  </Small>\n)\n\nCommaSeparatedTags.propTypes = {\n  tags: PropTypes.string,\n}\n\nCommaSeparatedTags.defaultProps = {\n  tags: '',\n}\n\nexport default CommaSeparatedTags\n","import PropTypes from 'prop-types'\n\nexport const context = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n    }),\n  }),\n])\n\nexport default PropTypes.shape({\n  next: context,\n  prev: context,\n})\n","import styled from '@emotion/styled'\n\nexport default styled.main(({ theme }) => ({\n  ...theme.centerPadding,\n}))\n","import React from 'react'\nimport dateformat from 'dateformat'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\nimport groupBy from 'lodash/groupBy'\nimport last from 'lodash/last'\nimport { Link as GatsbyLink } from 'gatsby'\nimport TagsList from './TagsList'\n\nconst groupPosts = posts =>\n  groupBy(posts, p => last(p.frontmatter.date.split(' ')))\n\nconst Header = styled.header(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  [theme.smallMedia]: {\n    flexDirection: 'column-reverse',\n    alignItems: 'flex-start',\n  },\n}))\n\nconst H3 = styled.h4(({ theme }) => ({\n  marginBottom: theme.spacing,\n}))\n\nconst Article = styled.article(({ theme }) => ({\n  marginBottom: theme.spacing,\n}))\n\nconst H4 = styled.h4({\n  margin: 0,\n})\n\nconst Link = styled(GatsbyLink)(({ theme }) => ({\n  textDecoration: 'none',\n  color: theme.textColor,\n  transition: 'color 250ms linear',\n  ':hover': {\n    color: theme.accentColor,\n  },\n}))\n\nconst LogList = ({ posts }) => {\n  const grouped = groupPosts(posts)\n  const years = Object.keys(grouped)\n    .sort()\n    .reverse()\n  return (\n    <section>\n      {years.map(year => (\n        <section key={year}>\n          <H3>{year}</H3>\n          {grouped[year].map(post => (\n            <Article key={post.frontmatter.path}>\n              <Header>\n                <H4>\n                  <Link to={post.frontmatter.path}>\n                    {post.frontmatter.title}\n                  </Link>\n                </H4>\n                <time\n                  dateTime={dateformat(post.frontmatter.date, 'isoDateTime')}\n                >\n                  {dateformat(post.frontmatter.date, 'mmmm d, yyyy')}\n                </time>\n              </Header>\n              <footer>\n                <TagsList tags={post.frontmatter.tags} />\n              </footer>\n            </Article>\n          ))}\n        </section>\n      ))}\n    </section>\n  )\n}\n\nLogList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        frontmatter: PropTypes.shape({\n          path: PropTypes.string.isRequired,\n          title: PropTypes.string.isRequired,\n          date: PropTypes.string.isRequired,\n          tags: PropTypes.string.isRequired,\n        }).isRequired,\n      }),\n    })\n  ).isRequired,\n}\n\nexport default LogList\n"],"sourceRoot":""}