{"version":3,"sources":["webpack:///./src/pages/techlog.js","webpack:///./src/components/TagsList.js","webpack:///./src/components/CenterWrap.js","webpack:///./src/components/LogPosts.js","webpack:///./src/shapes/frontmatter.js","webpack:///./src/shapes/post.js"],"names":["TechLog","_ref","posts","data","allMarkdownRemark","edges","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_CenterWrap__WEBPACK_IMPORTED_MODULE_4__","className","_components_LogPosts__WEBPACK_IMPORTED_MODULE_5__","map","post","node","propTypes","PropTypes","shape","arrayOf","postShape","isRequired","query","Small","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__","target","name","styles","A","Link","theme","textDecoration","color","textColor","transition",":hover","accentColor","CommaSeparatedTags","_ref2","tags","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","split","tag","index","array","key","to","length","string","defaultProps","__webpack_exports__","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","padding","Header","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_5__","display","flexDirection","justifyContent","alignItems","smallMedia","H3","_ref3","marginBottom","spacing","Article","_ref4","borderBottom","H4","GatsbyLink","_ref5","LogList","_ref6","grouped","groupBy","p","last","frontmatter","date","groupPosts","years","keys","sort","reverse","_emotion_core__WEBPACK_IMPORTED_MODULE_6__","year","path","title","dateTime","dateformat","_TagsList__WEBPACK_IMPORTED_MODULE_13__","id"],"mappings":"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","file":"component---src-pages-techlog-js-8c2cc058aba96c1f77c8.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport Layout from '../components/layout'\nimport CenterWrap from '../components/CenterWrap'\nimport LogPosts from '../components/LogPosts'\nimport postShape from '../shapes/post'\n\nconst TechLog = ({\n  data: {\n    allMarkdownRemark: { edges: posts },\n  },\n}) => (\n  <Layout>\n    <CenterWrap className=\"blog\">\n      <h2>Blog</h2>\n      <LogPosts posts={posts.map(post => post.node)} />\n    </CenterWrap>\n  </Layout>\n)\n\nTechLog.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(postShape),\n    }),\n  }).isRequired,\n}\n\nexport default TechLog\n\nexport const query = graphql`\n  query TechLogQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport styled from '@emotion/styled'\n\nconst Small = styled.small({\n  textTransform: 'uppercase',\n})\n\nconst A = styled(Link)(({ theme }) => ({\n  textDecoration: 'none',\n  color: theme.textColor,\n  transition: 'color 250ms linear',\n  ':hover': {\n    textDecoration: 'underline',\n    color: theme.accentColor,\n  },\n}))\n\nconst CommaSeparatedTags = ({ tags }) => (\n  <Small>\n    Topics:{' '}\n    {tags.split(', ').map((tag, index, array) => (\n      <span key={tag}>\n        <A to={`/tag/${tag}/`}>{tag}</A>\n        {index < array.length - 1 ? ', ' : ''}\n      </span>\n    ))}\n  </Small>\n)\n\nCommaSeparatedTags.propTypes = {\n  tags: PropTypes.string,\n}\n\nCommaSeparatedTags.defaultProps = {\n  tags: '',\n}\n\nexport default CommaSeparatedTags\n","import styled from '@emotion/styled'\n\nexport default styled.main(({ theme }) => ({\n  padding: '0% 2%',\n}))\n","import React from 'react'\nimport dateformat from 'dateformat'\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\nimport groupBy from 'lodash/groupBy'\nimport last from 'lodash/last'\nimport { Link as GatsbyLink } from 'gatsby'\nimport TagsList from './TagsList'\n\nconst groupPosts = posts =>\n  groupBy(posts, p => last(p.frontmatter.date.split(' ')))\n\nconst Header = styled.header(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  [theme.smallMedia]: {\n    flexDirection: 'column-reverse',\n    alignItems: 'flex-start',\n  },\n}))\n\nconst H3 = styled.h4(({ theme }) => ({\n  marginBottom: theme.spacing,\n}))\n\nconst Article = styled.article(({ theme }) => ({\n  marginBottom: '2%',\n  borderBottom: '1px solid #bac8ff',\n}))\n\nconst H4 = styled.h4({\n  margin: 0,\n})\n\nconst Link = styled(GatsbyLink)(({ theme }) => ({\n  textDecoration: 'none',\n  color: theme.textColor,\n  transition: 'color 250ms linear',\n  ':hover': {\n    textDecoration: 'underline',\n    color: theme.accentColor,\n  },\n}))\n\nconst LogList = ({ posts }) => {\n  const grouped = groupPosts(posts)\n  const years = Object.keys(grouped)\n    .sort()\n    .reverse()\n  return (\n    <section>\n      {years.map(year => (\n        <section key={year}>\n          <H3>{year}</H3>\n          {grouped[year].map(post => (\n            <Article key={post.frontmatter.path}>\n              <Header>\n                <H4>\n                  <Link to={post.frontmatter.path}>\n                    {post.frontmatter.title}\n                  </Link>\n                </H4>\n                <time\n                  dateTime={dateformat(post.frontmatter.date, 'isoDateTime')}\n                >\n                  {dateformat(post.frontmatter.date, 'mmmm d, yyyy')}\n                </time>\n              </Header>\n              <footer>\n                <TagsList tags={post.frontmatter.tags} />\n              </footer>\n            </Article>\n          ))}\n        </section>\n      ))}\n    </section>\n  )\n}\n\nLogList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        frontmatter: PropTypes.shape({\n          path: PropTypes.string.isRequired,\n          title: PropTypes.string.isRequired,\n          date: PropTypes.string.isRequired,\n          tags: PropTypes.string.isRequired,\n        }).isRequired,\n      }),\n    })\n  ).isRequired,\n}\n\nexport default LogList\n","import PropTypes from 'prop-types'\n\nexport default PropTypes.shape({\n  date: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n})\n","import PropTypes from 'prop-types'\nimport frontmatter from './frontmatter'\n\nexport default PropTypes.shape({\n  id: PropTypes.string,\n  frontmatter,\n})\n"],"sourceRoot":""}